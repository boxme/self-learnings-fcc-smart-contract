{
  "address": "0x8BdD6Cf03104abDda9F5fb654025d20EbBa3d851",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x600ce76ab8ed170fbde60b48530b46d90acfdf38dd0912c34c635f24d2d679b8",
  "receipt": {
    "to": null,
    "from": "0x22fD0416c3188847fa7F02cB1382f8CEfe29997A",
    "contractAddress": "0x8BdD6Cf03104abDda9F5fb654025d20EbBa3d851",
    "transactionIndex": 17,
    "gasUsed": "1280533",
    "logsBloom": "0x
    "blockHash": "0x128adfb333b88015cf5006859f51bcba2c97c84e69564afcb2a962ccffac529a",
    "transactionHash": "0x600ce76ab8ed170fbde60b48530b46d90acfdf38dd0912c34c635f24d2d679b8",
    "logs": [],
    "blockNumber": 7696055,
    "cumulativeGasUsed": "6458776",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "100000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "2337",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "b9cca6254ac3473d24d76e08c7dc45b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"},\"performUpkeep(bytes)\":{\"details\":\"Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner. \\\"performData\\\" is from checkUpKeep() function.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__RaffleNotOpen();\\nerror Raffle__TransferFailed();\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    // Type declarations\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscripionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Lottery Variables\\n    uint256 private immutable i_interval;\\n    uint256 private immutable i_entranceFee;\\n    uint256 private s_lastTimestamp;\\n    address private s_recentWinner;\\n    address payable[] private s_players;\\n    RaffleState private s_raffleState;\\n\\n    // Events\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed player);\\n\\n    // Chainlink VRF subscription ID 2337\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gasLane, // keyhash\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscripionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        i_interval = interval;\\n        s_lastTimestamp = block.timestamp;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) revert Raffle__NotEnoughETHEntered();\\n\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__RaffleNotOpen();\\n        }\\n\\n        s_players.push(payable(msg.sender));\\n        // Emit an event when we update a dynamic array or mapping\\n        // Named events with the function name reversed\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True.\\n     * the following should be true for this to return true:\\n     * 1. The time interval has passed between raffle runs.\\n     * 2. The lottery is open.\\n     * 3. The contract has ETH.\\n     * 4. Implicity, your subscription is funded with LINK.\\n     */\\n    function checkUpkeep(\\n        bytes calldata /*checkData*/\\n    ) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n        bool isOpen = s_raffleState == RaffleState.OPEN;\\n        bool timePassed = (block.timestamp - s_lastTimestamp) >= i_interval;\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    /**\\n     * @dev Once `checkUpkeep` is returning `true`, this function is called\\n     * and it kicks off a Chainlink VRF call to get a random winner.\\n     *\\n     * \\\"performData\\\" is from checkUpKeep() function.\\n     */\\n    function performUpkeep(\\n        bytes calldata /*performData*/\\n    ) external override {\\n        (bool upkeepNeeded, ) = this.checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n\\n        // Request random words to Chainlink VRF\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscripionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    /**\\n     * This is the function that Chainlink VRF node calls\\n     * when the random words have been verified by the chain\\n     */\\n    function fulfillRandomWords(\\n        uint256, /*requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        // Reset players\\n        s_players = new address payable[](0);\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimestamp = block.timestamp;\\n\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            // require(success, \\\"Transfer failed\\\")\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimestamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getBlockTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x4ffa6660d8f6372c5c413a797a6652a5947600f7a18aa1488e4fc72bb1b16687\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200196938038062001969833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508461014081815250508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff16815250506000600360006101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550806101208181525050426000819055505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161159a620003cf60003960008181610340015261043d015260008181610888015261093c015260006107470152600061072401526000610703015260006106c701526000818161037d01526103d1015261159a6000f3fe6080604052600436106100dd5760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b41461027e578063c1c244e8146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b80635f1b0fd8146101ea5780636e04ff0d14610215578063796b89b914610253576100dd565b80632cfcc539116100bb5780632cfcc539146101615780634585e33b1461016b578063473f1ddc1461019457806353a2c19a146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610cb1565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610d43565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610ef7565b61037b565b005b61016961043b565b005b34801561017757600080fd5b50610192600480360381019061018d9190610fae565b6105aa565b005b3480156101a057600080fd5b506101a9610800565b6040516101b6919061103c565b60405180910390f35b3480156101cb57600080fd5b506101d461082a565b6040516101e19190610cb1565b60405180910390f35b3480156101f657600080fd5b506101ff610839565b60405161020c9190610cb1565b60405180910390f35b34801561022157600080fd5b5061023c60048036038101906102379190610fae565b610846565b60405161024a9291906110f1565b60405180910390f35b34801561025f57600080fd5b50610268610930565b6040516102759190610cb1565b60405180910390f35b34801561028a57600080fd5b50610293610938565b6040516102a09190610cb1565b60405180910390f35b3480156102b557600080fd5b506102be610960565b6040516102cb9190610cb1565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190611121565b610969565b604051610308919061103c565b60405180910390f35b34801561031d57600080fd5b506103266109b1565b6040516103339190610cb1565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042492919061114e565b60405180910390fd5b61043782826109be565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610495576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a9576104a8610ccc565b5b600360009054906101000a900460ff1660018111156104cb576104ca610ccc565b5b14610502576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60003073ffffffffffffffffffffffffffffffffffffffff16636e04ff0d6040518163ffffffff1660e01b81526004016105e39061119d565b600060405180830381865afa158015610600573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610629919061128f565b509050806106985747600280549050600360009054906101000a900460ff16600181111561065a57610659610ccc565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161068f939291906112eb565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156106be576106bd610ccc565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161078895949392919061139a565b6020604051808303816000875af11580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb9190611402565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60006060600080600181111561085f5761085e610ccc565b5b600360009054906101000a900460ff16600181111561088157610880610ccc565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600054426108b5919061145e565b10159050600080600280549050119050600080471190508280156108d65750835b80156108df5750805b80156108e85750815b9550856040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525095509550505050509250929050565b600042905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b60006002828154811061097f5761097e611492565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600280549050905090565b6000600280549050826000815181106109da576109d9611492565b5b60200260200101516109ec91906114f0565b9050600060028281548110610a0457610a03611492565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a8d57610a8c610db4565b5b604051908082528060200260200182016040528015610abb5781602001602082028036833780820191505090505b5060029080519060200190610ad1929190610bf1565b506000600360006101000a81548160ff02191690836001811115610af857610af7610ccc565b5b02179055504260008190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b2a9061154f565b60006040518083038185875af1925050503d8060008114610b67576040519150601f19603f3d011682016040523d82523d6000602084013e610b6c565b606091505b5050905080610ba7576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c6a579160200282015b82811115610c695782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c11565b5b509050610c779190610c7b565b5090565b5b80821115610c94576000816000905550600101610c7c565b5090565b6000819050919050565b610cab81610c98565b82525050565b6000602082019050610cc66000830184610ca2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d0c57610d0b610ccc565b5b50565b6000819050610d1d82610cfb565b919050565b6000610d2d82610d0f565b9050919050565b610d3d81610d22565b82525050565b6000602082019050610d586000830184610d34565b92915050565b6000604051905090565b600080fd5b600080fd5b610d7b81610c98565b8114610d8657600080fd5b50565b600081359050610d9881610d72565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dec82610da3565b810181811067ffffffffffffffff82111715610e0b57610e0a610db4565b5b80604052505050565b6000610e1e610d5e565b9050610e2a8282610de3565b919050565b600067ffffffffffffffff821115610e4a57610e49610db4565b5b602082029050602081019050919050565b600080fd5b6000610e73610e6e84610e2f565b610e14565b90508083825260208201905060208402830185811115610e9657610e95610e5b565b5b835b81811015610ebf5780610eab8882610d89565b845260208401935050602081019050610e98565b5050509392505050565b600082601f830112610ede57610edd610d9e565b5b8135610eee848260208601610e60565b91505092915050565b60008060408385031215610f0e57610f0d610d68565b5b6000610f1c85828601610d89565b925050602083013567ffffffffffffffff811115610f3d57610f3c610d6d565b5b610f4985828601610ec9565b9150509250929050565b600080fd5b60008083601f840112610f6e57610f6d610d9e565b5b8235905067ffffffffffffffff811115610f8b57610f8a610f53565b5b602083019150836001820283011115610fa757610fa6610e5b565b5b9250929050565b60008060208385031215610fc557610fc4610d68565b5b600083013567ffffffffffffffff811115610fe357610fe2610d6d565b5b610fef85828601610f58565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061102682610ffb565b9050919050565b6110368161101b565b82525050565b6000602082019050611051600083018461102d565b92915050565b60008115159050919050565b61106c81611057565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110ac578082015181840152602081019050611091565b60008484015250505050565b60006110c382611072565b6110cd818561107d565b93506110dd81856020860161108e565b6110e681610da3565b840191505092915050565b60006040820190506111066000830185611063565b818103602083015261111881846110b8565b90509392505050565b60006020828403121561113757611136610d68565b5b600061114584828501610d89565b91505092915050565b6000604082019050611163600083018561102d565b611170602083018461102d565b9392505050565b50565b600061118760008361107d565b915061119282611177565b600082019050919050565b600060208201905081810360008301526111b68161117a565b9050919050565b6111c681611057565b81146111d157600080fd5b50565b6000815190506111e3816111bd565b92915050565b600080fd5b600067ffffffffffffffff82111561120957611208610db4565b5b61121282610da3565b9050602081019050919050565b600061123261122d846111ee565b610e14565b90508281526020810184848401111561124e5761124d6111e9565b5b61125984828561108e565b509392505050565b600082601f83011261127657611275610d9e565b5b815161128684826020860161121f565b91505092915050565b600080604083850312156112a6576112a5610d68565b5b60006112b4858286016111d4565b925050602083015167ffffffffffffffff8111156112d5576112d4610d6d565b5b6112e185828601611261565b9150509250929050565b60006060820190506113006000830186610ca2565b61130d6020830185610ca2565b61131a6040830184610ca2565b949350505050565b6000819050919050565b61133581611322565b82525050565b600067ffffffffffffffff82169050919050565b6113588161133b565b82525050565b600061ffff82169050919050565b6113758161135e565b82525050565b600063ffffffff82169050919050565b6113948161137b565b82525050565b600060a0820190506113af600083018861132c565b6113bc602083018761134f565b6113c9604083018661136c565b6113d6606083018561138b565b6113e3608083018461138b565b9695505050505050565b6000815190506113fc81610d72565b92915050565b60006020828403121561141857611417610d68565b5b6000611426848285016113ed565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061146982610c98565b915061147483610c98565b925082820390508181111561148c5761148b61142f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114fb82610c98565b915061150683610c98565b925082611516576115156114c1565b5b828206905092915050565b600081905092915050565b6000611539600083611521565b915061154482611177565b600082019050919050565b600061155a8261152c565b915081905091905056fea26469706673582212203c74ac0e6476a9f4d1f10c56518e75daa43eb46abb16c129d6fc33e599f0a0e964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b41461027e578063c1c244e8146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b80635f1b0fd8146101ea5780636e04ff0d14610215578063796b89b914610253576100dd565b80632cfcc539116100bb5780632cfcc539146101615780634585e33b1461016b578063473f1ddc1461019457806353a2c19a146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610cb1565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610d43565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610ef7565b61037b565b005b61016961043b565b005b34801561017757600080fd5b50610192600480360381019061018d9190610fae565b6105aa565b005b3480156101a057600080fd5b506101a9610800565b6040516101b6919061103c565b60405180910390f35b3480156101cb57600080fd5b506101d461082a565b6040516101e19190610cb1565b60405180910390f35b3480156101f657600080fd5b506101ff610839565b60405161020c9190610cb1565b60405180910390f35b34801561022157600080fd5b5061023c60048036038101906102379190610fae565b610846565b60405161024a9291906110f1565b60405180910390f35b34801561025f57600080fd5b50610268610930565b6040516102759190610cb1565b60405180910390f35b34801561028a57600080fd5b50610293610938565b6040516102a09190610cb1565b60405180910390f35b3480156102b557600080fd5b506102be610960565b6040516102cb9190610cb1565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190611121565b610969565b604051610308919061103c565b60405180910390f35b34801561031d57600080fd5b506103266109b1565b6040516103339190610cb1565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042492919061114e565b60405180910390fd5b61043782826109be565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610495576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a9576104a8610ccc565b5b600360009054906101000a900460ff1660018111156104cb576104ca610ccc565b5b14610502576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60003073ffffffffffffffffffffffffffffffffffffffff16636e04ff0d6040518163ffffffff1660e01b81526004016105e39061119d565b600060405180830381865afa158015610600573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610629919061128f565b509050806106985747600280549050600360009054906101000a900460ff16600181111561065a57610659610ccc565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161068f939291906112eb565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156106be576106bd610ccc565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161078895949392919061139a565b6020604051808303816000875af11580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb9190611402565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60006060600080600181111561085f5761085e610ccc565b5b600360009054906101000a900460ff16600181111561088157610880610ccc565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600054426108b5919061145e565b10159050600080600280549050119050600080471190508280156108d65750835b80156108df5750805b80156108e85750815b9550856040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525095509550505050509250929050565b600042905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b60006002828154811061097f5761097e611492565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600280549050905090565b6000600280549050826000815181106109da576109d9611492565b5b60200260200101516109ec91906114f0565b9050600060028281548110610a0457610a03611492565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a8d57610a8c610db4565b5b604051908082528060200260200182016040528015610abb5781602001602082028036833780820191505090505b5060029080519060200190610ad1929190610bf1565b506000600360006101000a81548160ff02191690836001811115610af857610af7610ccc565b5b02179055504260008190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b2a9061154f565b60006040518083038185875af1925050503d8060008114610b67576040519150601f19603f3d011682016040523d82523d6000602084013e610b6c565b606091505b5050905080610ba7576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c6a579160200282015b82811115610c695782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c11565b5b509050610c779190610c7b565b5090565b5b80821115610c94576000816000905550600101610c7c565b5090565b6000819050919050565b610cab81610c98565b82525050565b6000602082019050610cc66000830184610ca2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d0c57610d0b610ccc565b5b50565b6000819050610d1d82610cfb565b919050565b6000610d2d82610d0f565b9050919050565b610d3d81610d22565b82525050565b6000602082019050610d586000830184610d34565b92915050565b6000604051905090565b600080fd5b600080fd5b610d7b81610c98565b8114610d8657600080fd5b50565b600081359050610d9881610d72565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dec82610da3565b810181811067ffffffffffffffff82111715610e0b57610e0a610db4565b5b80604052505050565b6000610e1e610d5e565b9050610e2a8282610de3565b919050565b600067ffffffffffffffff821115610e4a57610e49610db4565b5b602082029050602081019050919050565b600080fd5b6000610e73610e6e84610e2f565b610e14565b90508083825260208201905060208402830185811115610e9657610e95610e5b565b5b835b81811015610ebf5780610eab8882610d89565b845260208401935050602081019050610e98565b5050509392505050565b600082601f830112610ede57610edd610d9e565b5b8135610eee848260208601610e60565b91505092915050565b60008060408385031215610f0e57610f0d610d68565b5b6000610f1c85828601610d89565b925050602083013567ffffffffffffffff811115610f3d57610f3c610d6d565b5b610f4985828601610ec9565b9150509250929050565b600080fd5b60008083601f840112610f6e57610f6d610d9e565b5b8235905067ffffffffffffffff811115610f8b57610f8a610f53565b5b602083019150836001820283011115610fa757610fa6610e5b565b5b9250929050565b60008060208385031215610fc557610fc4610d68565b5b600083013567ffffffffffffffff811115610fe357610fe2610d6d565b5b610fef85828601610f58565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061102682610ffb565b9050919050565b6110368161101b565b82525050565b6000602082019050611051600083018461102d565b92915050565b60008115159050919050565b61106c81611057565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110ac578082015181840152602081019050611091565b60008484015250505050565b60006110c382611072565b6110cd818561107d565b93506110dd81856020860161108e565b6110e681610da3565b840191505092915050565b60006040820190506111066000830185611063565b818103602083015261111881846110b8565b90509392505050565b60006020828403121561113757611136610d68565b5b600061114584828501610d89565b91505092915050565b6000604082019050611163600083018561102d565b611170602083018461102d565b9392505050565b50565b600061118760008361107d565b915061119282611177565b600082019050919050565b600060208201905081810360008301526111b68161117a565b9050919050565b6111c681611057565b81146111d157600080fd5b50565b6000815190506111e3816111bd565b92915050565b600080fd5b600067ffffffffffffffff82111561120957611208610db4565b5b61121282610da3565b9050602081019050919050565b600061123261122d846111ee565b610e14565b90508281526020810184848401111561124e5761124d6111e9565b5b61125984828561108e565b509392505050565b600082601f83011261127657611275610d9e565b5b815161128684826020860161121f565b91505092915050565b600080604083850312156112a6576112a5610d68565b5b60006112b4858286016111d4565b925050602083015167ffffffffffffffff8111156112d5576112d4610d6d565b5b6112e185828601611261565b9150509250929050565b60006060820190506113006000830186610ca2565b61130d6020830185610ca2565b61131a6040830184610ca2565b949350505050565b6000819050919050565b61133581611322565b82525050565b600067ffffffffffffffff82169050919050565b6113588161133b565b82525050565b600061ffff82169050919050565b6113758161135e565b82525050565b600063ffffffff82169050919050565b6113948161137b565b82525050565b600060a0820190506113af600083018861132c565b6113bc602083018761134f565b6113c9604083018661136c565b6113d6606083018561138b565b6113e3608083018461138b565b9695505050505050565b6000815190506113fc81610d72565b92915050565b60006020828403121561141857611417610d68565b5b6000611426848285016113ed565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061146982610c98565b915061147483610c98565b925082820390508181111561148c5761148b61142f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114fb82610c98565b915061150683610c98565b925082611516576115156114c1565b5b828206905092915050565b600081905092915050565b6000611539600083611521565b915061154482611177565b600082019050919050565b600061155a8261152c565b915081905091905056fea26469706673582212203c74ac0e6476a9f4d1f10c56518e75daa43eb46abb16c129d6fc33e599f0a0e964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."
      },
      "performUpkeep(bytes)": {
        "details": "Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner. \"performData\" is from checkUpKeep() function."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 212,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimestamp",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 214,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 217,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 220,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(RaffleState)191"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)191": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}